import java.util.List;

/**
 * This interface defines the methods that you are required to 
 * implement in MyHashTable.java. Don't forget to read the
 * instructions for additional requirements for your
 * MyHashTable.java implementation.
 * 
 * DO NOT EDIT THIS FILE. Feel free to add any additional methods
 * that you feel you need but do so in MyHashTable.java, not in 
 * this interface.
 * 
 * @param <K> the type of the key used to store the value
 * @param <V> the type of the value/element being stored in the hash table
 */
public interface ITable<K, V> {
	
	/**
	 * Inserts the value into the hashTable using the key.
	 * 
	 * The key should be hashed by taking all of the chars that make up its
	 * string representation and adding them together. For instance:
	 * 'cat' = 99 + 97 + 116
	 * Be sure to handle the case in which the hash > capacity of hash table.
	 * 
	 * If the load factor > .75 with the addition of this new value then 
	 * call reHash before performing the new insert. See the reHash javadoc
	 * for more information.
	 * 
	 * If the key is null (no String representation) then do not perform the
	 * insert and return false.
	 * 
	 * @param key the key to use to insert the value
	 * @param value the value to insert into the hash table
	 * @return true if successfully added, false otherwise
	 */
	public boolean put(K key, V value);
	
	/**
	 * Should only be called when the load factor of the hash table > 0.75.
	 * This function doubles the size of the hash table and then rehashes
	 * every entry into the new hash table.
	 */
	public void reHash();

	/**
	 * Get all values from the hash table that have the key. Returns
	 * null if the key passed in is null or if the key does not have any values.
	 * @param key the key to get all the values for
	 * @return a List of values with the specified key in the hash table or null
	 */
	public List<V> getAll(K key);
	
	/**
	 * Determines whether the key is currently in the hash table.
	 * @param key the key to check for
	 * @return true if the key is in the hash table, false otherwise
	 */
	public boolean containsKey(K key);
	
	/**
	 * Determines whether the value is currently in the hash table
	 * @param value the value to check for
	 * @return true if the value is in the hash table, false otherwise
	 */
	public boolean containsValue(V value);
	
	/**
	 * Clears the hash table so that it contains no keys or values. The
	 * capacity of the 
	 */
	public void clear();
	
	/**
	 * Returns the number of values (NOT KEYS) currently held in the
	 * hash table.
	 * @return the number of values in the hash table
	 */
	public int size();
	
	/**
	 * Determines whether the hash table is empty.
	 * @return true if there is at least one value in the hash table,
	 * false otherwise.
	 */
	public boolean isEmpty();
	
	/**
	 * This must create a string representation of the hash table and
	 * return it. It should print the index of the hash table first and
	 * then list the key, value pairs held at that index. For instance,
	 * a possible representation of a hash table of size 5 could be:
	 * 
	 * "0: (red, George) (red, Grace)
	 *  1:
	 *  2: (Magenta, Cindy)
	 *  3: (Blue, Fred) (Blue, Tom) (Blue Ian)
	 *  4: (Green Rob)"
	 *  
	 *  The entries being printed are in the following format: (key, value)
	 *  If a value in a hash entry is null then just print: (key null)
	 *  
	 *  Index 1 did not have any entries so it was left blank.
	 *  
	 * @return the string representation of the hash table
	 */
	public String toString();
}
